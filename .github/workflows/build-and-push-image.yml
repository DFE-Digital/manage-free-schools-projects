name: Deploy to environment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: "Choose an environment to deploy to"
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.environment }}

env:
  IMAGE_NAME: mfsp-app

jobs:
  set-env:
    name: Determine environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.var.outputs.environment }}
      release: ${{ steps.var.outputs.release }}
      image-name: ${{ steps.var.outputs.image-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: var
        run: |
          INPUT=${{ github.event.inputs.environment }}
          ENVIRONMENT=${INPUT:-"development"}
          RELEASE=${ENVIRONMENT,,}-`date +%Y-%m-%d`.${{ github.run_number }}
          echo "environment=${ENVIRONMENT,,}" >> $GITHUB_OUTPUT
          echo "release=${RELEASE}" >> $GITHUB_OUTPUT
          echo "image-name=${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT

  validate-packages:
    runs-on: windows-latest
    name: Package Validation
    permissions:
      contents: read
    needs: [ set-env ]
    steps:
      - name: Validate Packages
        uses: DFE-Digital/rsd-github-actions/.github/actions/validate-packages@v1.1.2
        with:
          environment: ${{ needs.set-env.outputs.environment }}

  build:
    name: Build
    needs: [ set-env, validate-packages ]
    permissions:
      packages: write
    uses: DFE-Digital/deploy-azure-container-apps-action/.github/workflows/build.yml@v5.0.0
    strategy:
      matrix:
        image: [
          "web",
          "api"
        ]
        include:
          - image: "web"
            tag-prefix: ""
          - image: "api"
            tag-prefix: "api-"
    with:
      environment: ${{ needs.set-env.outputs.environment }}
      docker-image-name: ${{ needs.set-env.outputs.image-name }}
      docker-build-args: CI=true
      docker-build-file-name: ./Dockerfile.${{ matrix.image }}
      docker-tag-prefix: ${{ matrix.tag-prefix }}

  import:
    name: Import
    needs: [ set-env, build ]
    permissions:
      id-token: write
    uses: DFE-Digital/deploy-azure-container-apps-action/.github/workflows/import.yml@v5.0.0
    strategy:
      matrix:
        image: [
          "web",
          "api"
        ]
        include:
          - image: "web"
            tag-prefix: ""
          - image: "api"
            tag-prefix: "api-"
    with:
      environment: ${{ needs.set-env.outputs.environment }}
      docker-image-name: ${{ needs.set-env.outputs.image-name }}
      docker-tag-prefix: ${{ matrix.tag-prefix }}
    secrets:
      azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      azure-acr-client-id: ${{ secrets.ACR_CLIENT_ID }}
      azure-acr-name: ${{ secrets.ACR_NAME }}

  deploy:
    name: Deploy
    needs: [ set-env, import ]
    permissions:
      id-token: write
    uses: DFE-Digital/deploy-azure-container-apps-action/.github/workflows/deploy.yml@v5.0.0
    strategy:
      matrix:
        image: [
          "web",
          "api"
        ]
        include:
          - image: "web"
            tag-prefix: ""
            aca_name_secret: "ACA_CONTAINERAPP_NAME"
          - image: "api"
            tag-prefix: "api-"
            aca_name_secret: "ACA_CONTAINERAPP_API_NAME"
    with:
      environment: ${{ needs.set-env.outputs.environment }}
      docker-image-name: ${{ needs.set-env.outputs.image-name }}
      docker-tag-prefix: ${{ matrix.tag-prefix }}
      annotate-release: ${{ matrix.image == 'web' }}
    secrets:
      azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      azure-acr-name: ${{ secrets.ACR_NAME }}
      azure-aca-client-id: ${{ secrets.ACA_CLIENT_ID }}
      azure-aca-name: ${{ secrets[matrix.aca_name_secret] }}
      azure-aca-resource-group: ${{ secrets.ACA_RESOURCE_GROUP }}

  create-tag:
    name: Tag and release
    needs: [ set-env, deploy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Create tag
        run: |
          git tag ${{ needs.set-env.outputs.release }}
          git push origin ${{ needs.set-env.outputs.release }}

      - name: Create release
        uses: "actions/github-script@v7"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              await github.rest.repos.createRelease({
                draft: ${{ needs.set-env.outputs.environment == 'test' }},
                generate_release_notes: true,
                name: "${{ needs.set-env.outputs.release }}",
                owner: context.repo.owner,
                prerelease: ${{ needs.set-env.outputs.environment == 'test' }},
                repo: context.repo.repo,
                tag_name: "${{ needs.set-env.outputs.release }}",
              });
            } catch (error) {
              core.setFailed(error.message);
            }

  cypress-tests:
    name: Run Cypress Tests
    if: needs.set-env.outputs.environment == 'test' || needs.set-env.outputs.environment == 'development'
    needs: [ deploy, set-env ]
    uses: ./.github/workflows/cypress-tests.yml
    with:
      environment: ${{ needs.set-env.outputs.environment }}
    secrets: inherit
